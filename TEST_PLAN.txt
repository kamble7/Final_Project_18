// TEST PLAN FOR LAST LEVEL CACHE SIMULATION

// Simple HIT/MISS test cases
// Simple PLRU test cases
// Snoop results to check MESI states

// ----------------------------------------------------------------------------------------------------------------------------
// Simple HIT/MISS test cases
// ----------------------------------------------------------------------------------------------------------------------------
   To check basic operations that address maps to correct index
1. Provide a CPU "read" instruction to address "a1" (assume cache is empty initially) which should result in a "MISS".
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and send message "SENDLINE" from L2 to L1
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S.
2. Provide a CPU "write" instruction to same address "a1", this should result in "HIT" as data is read into cache by previous read
	Should observe a HIT followed by a "BUS upgrade" operation if line is previously in "Shared" (S) state
	Should observe a HIT with NO BUS operations if line is previously in "Exclusive" (E) state.
	Change MESI state (internally) to "Modified" (M)
3. Provide a CPU "write" instruction to address "a2" (same address as a1(same index & tag), except byte select bits are different) which should result in HIT
	Should observe a HIT and do nothing.
4. Provide a CPU "write" instruction to different address "a3" (completely different cache line than previously accessed but with same index, different tag)
	Should result in MISS followed by a "BUS read" operation (to get data from DRAM) and send message "SENDLINE" from L2 to L1
	(after getting data from DRAM sends the requested line to L1) Change MESI state (internally) to "Modified" (M).
5. Provide 8 consecutive CPU "read/write" instructions to address "a4" (each time with different tag & same index)
	Should result in MISS for 8 times followed by "BUS read" operation (to get data from DRAM) and send message "SENDLINE" from L2 to L1
	internally change MESI state to E or S if its read, Change MESI state (internally) to "Modified" (M) if its write.
6. Provide CPU "read/write" instructions to address "a4" (same as in step 5(same tag & index) with different byte select bits)
	Should result in HIT for all and do nothing
// ----------------------------------------------------------------------------------------------------------------------------
// END of Simple HIT/MISS test cases
// ----------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------
// Simple PLRU test cases
// ----------------------------------------------------------------------------------------------------------------------------
1. Provide 8 consecutive "read" instructions to addresses (a0,a1,a2,a3,a4,a5,a6,a7) with different tag and same index
	should result in all MISSES
2. Provide a CPU "read" instructions to addresses "a2,a1" (which are same as in previous step)
	Should result in HIT and should change LRU bits so that they are the Most recently used ways.
3. Provide a CPU "read" to address "a8" with same index different tag 
	Should result in MISS and should evict way5 and replace a4 with a8.
	Should observe L2 to L1 message "Evictline".
4. Provide a CPU "read" to address "a9" with same index different tag
	Should result in MISS and should evict way4 and replace a3 with a9.
	Should observe L2 to L1 message "Evictline".
5. Provide a CPU "read" to address "a5" (same address used in step1)
	Should result in HIT and should update LRU bits so that it is the Most recently used way.
6. Provide a CPU "read" to address "a10" with same index different tag
	Should result in MISS and should evict way1 and replace a0 with a10.
	Should observe L2 to L1 message "Evictline"
// ----------------------------------------------------------------------------------------------------------------------------
// END of PLRU test cases
// ----------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------
// Simple Snoopresult test cases (To check MESI states)
// ----------------------------------------------------------------------------------------------------------------------------
// TEST PLAN FOR LAST LEVEL CACHE SIMULATION

// Simple HIT/MISS test cases
// Simple PLRU test cases
// Snoop results to check MESI states

// ----------------------------------------------------------------------------------------------------------------------------
// Simple HIT/MISS test cases
// ----------------------------------------------------------------------------------------------------------------------------
   To check basic operations that address maps to correct index
1. Provide a CPU "read" instruction to address "a1" (assume cache is empty initially) which should result in a "MISS".
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and send message "SENDLINE" from L2 to L1
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S.
2. Provide a CPU "write" instruction to same address "a1", this should result in "HIT" as data is read into cache by previous read
	Should observe a HIT followed by a "BUS upgrade" operation if line is previously in "Shared" (S) state
	Should observe a HIT with NO BUS operations if line is previously in "Exclusive" (E) state.
	Change MESI state (internally) to "Modified" (M)
3. Provide a CPU "write" instruction to address "a2" (same address as a1(same index & tag), except byte select bits are different) which should result in HIT
	Should observe a HIT and do nothing.
4. Provide a CPU "write" instruction to different address "a3" (completely different cache line than previously accessed but with same index, different tag)
	Should result in MISS followed by a "BUS read" operation (to get data from DRAM) and send message "SENDLINE" from L2 to L1
	(after getting data from DRAM sends the requested line to L1) Change MESI state (internally) to "Modified" (M).
5. Provide 8 consecutive CPU "read/write" instructions to address "a4" (each time with different tag & same index)
	Should result in MISS for 8 times followed by "BUS read" operation (to get data from DRAM) and send message "SENDLINE" from L2 to L1
	internally change MESI state to E or S if its read, Change MESI state (internally) to "Modified" (M) if its write.
6. Provide CPU "read/write" instructions to address "a4" (same as in step 5(same tag & index) with different byte select bits)
	Should result in HIT for all and do nothing
// ----------------------------------------------------------------------------------------------------------------------------
// END of Simple HIT/MISS test cases
// ----------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------
// Simple PLRU test cases
// ----------------------------------------------------------------------------------------------------------------------------
1. Provide 8 consecutive "read" instructions to addresses (a0,a1,a2,a3,a4,a5,a6,a7) with different tag and same index
	should result in all MISSES
2. Provide a CPU "read" instructions to addresses "a2,a1" (which are same as in previous step)
	Should result in HIT and should change LRU bits so that they are the Most recently used ways.
3. Provide a CPU "read" to address "a8" with same index different tag 
	Should result in MISS and should evict way5 and replace a4 with a8.
	Should observe L2 to L1 message "Evictline".
4. Provide a CPU "read" to address "a9" with same index different tag
	Should result in MISS and should evict way4 and replace a3 with a9.
	Should observe L2 to L1 message "Evictline".
5. Provide a CPU "read" to address "a5" (same address used in step1)
	Should result in HIT and should update LRU bits so that it is the Most recently used way.
6. Provide a CPU "read" to address "a10" with same index different tag
	Should result in MISS and should evict way1 and replace a0 with a10.
	Should observe L2 to L1 message "Evictline"
// ----------------------------------------------------------------------------------------------------------------------------
// END of PLRU test cases
// ----------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------
// Simple Snoopresult test cases (To check MESI states)
// ----------------------------------------------------------------------------------------------------------------------------

When a Cache line is in Invalid MESI state(empty)
1. Provide "read" to address "a1" (assume cache is empty initially) which should result in a "MISS"
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1),
	internally change MESI state to E if we snoop 'hitM/nohit' or S if we snoop 'hit'. (4)
2. Provide "write" to address "a2" (assume cache is empty initially) which should result in a "MISS"
	Should observe a MISS followed by a "BUS readX" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1),
	internally change MESI state to M. (1)
3. Provide any snoop commnads to address "a3"(not present in cache), 
	Should observe no change in states and no bus operations as line is not present in your cache.(4)

When a Cache line is in  Modified MESI state
1.Provide commands and addresses to fill the cache line and keep them in Modified state(8)
2. Provide any cpu commnads(read/write) to address in modified state, there should not be any bus operations or MESI state changes (3)
3. Provide "snoop read" to an address in modifies state, we should see "write" bus operation and changes the MESI State internally to Shared and L2 to L1 message "Getline" (1)
4. Provide "snoop readX" to an address in modifies state, we should see "write" bus operation and changes the MESI State internally to Invalid and L2 to L1 message "Getline & Invalidateline"  (1)


When a Cache line is in Shared MESI state
5. Provide "read/Snoop read" to an address in shared state, we should see no changes (2)
6. Provide "write" to an address in shared state, we should see change in the MESI State internally from Shared to Modified and "invalidate" bus operation. (1)
7. Provide "snoop readX/snoop invalidate" to an address in shared state, we should see change in the MESI State internally from shared to invalid and L2 to L1 message "Invalidateline" (4)


When a Cache line is in Exclusive MESI state
8. Provide "read" to an address in modified state, we should see no changes (2)
9. Provide "write" to an address in modified state, we should see change in the MESI Stateinternally from Exclusive to Modified (1)
10. Provide "snoop read" to an address in modified state, we should see change in the MESI State internally from Exclusive to Shared (2)
11. Provide "snoop readX" to an address in modified state, we should see change in the MESI State internally from Exclusive to Invalid and L2 to L1 message "Invalidateline"  (2)

//sam

4. Provide CPU "read" to address "a3" followed by "snoop read" to the same address "a3"
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S for read operation.
	Should observe state change to "S" shared if it is previously in "E" Exclusive state for "snoop read" operation.
	Should observe no change in state if it is previously in "S" Shared state for "snoop read".
5. Provide "Snoop write" to address "a4" (Different address not present in cache)
	Should observe no change in states as it is not present in cache.
6. Provide "read" to address "a5" (Different address not present in cache) followed by "snoop write" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S for "read" operation.
	Should observe L2 to L1 message "Invalidateline" and change state to "I" for "snoop write" operation.
7. Provide "write" to address "a6" (Different address not present in cache) followed by "snoop write" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to "M" for "write" operation.
	Should observe L2 to L1 message "Getline & Invalidateline" and change state to "I" for "snoop write" operation.
8. Provide "read" to address "a7" (Different address not present in cache) followed by "snoop RWIM" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S for "read" operation.
	Should observe L2 to L1 message "Invalidateline" and change state to "I" for "snoop RWIM" operation.
9. Provide "write" to address "a8" (Different address not present in cache) followed by "snoop RWIM" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to "M" for "write" operation.
	Should observe L2 to L1 message "Getline & Invalidateline" and change state to "I" for "snoop RWIM" operation.
10. Provide "snoop RWIM" to new address "a9" (Not present in your cache)
	Should do nothing as line is not present in your cache.
// ----------------------------------------------------------------------------------------------------------------------------
// END of Snoopresult test cases
// ----------------------------------------------------------------------------------------------------------------------------

















1. Provide "read" to address "a1" (assume cache is empty initially) which should result in a "MISS"
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S.
2. Provide "snoop invalidate" to same address "a1" which should result in MESI state change to "I"
	Should observe L2 to L1 message "Invalidateline" and change state to "I"
3. Provide "snoop invalidate" to same address "a2" (Different address) and is not present in your cache.
	Should observe no change in states as line is not present in your cache.
4. Provide CPU "read" to address "a3" followed by "snoop read" to the same address "a3"
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S for read operation.
	Should observe state change to "S" shared if it is previously in "E" Exclusive state for "snoop read" operation.
	Should observe no change in state if it is previously in "S" Shared state for "snoop read".
5. Provide "Snoop write" to address "a4" (Different address not present in cache)
	Should observe no change in states as it is not present in cache.
6. Provide "read" to address "a5" (Different address not present in cache) followed by "snoop write" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S for "read" operation.
	Should observe L2 to L1 message "Invalidateline" and change state to "I" for "snoop write" operation.
7. Provide "write" to address "a6" (Different address not present in cache) followed by "snoop write" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to "M" for "write" operation.
	Should observe L2 to L1 message "Getline & Invalidateline" and change state to "I" for "snoop write" operation.
8. Provide "read" to address "a7" (Different address not present in cache) followed by "snoop RWIM" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to E or S for "read" operation.
	Should observe L2 to L1 message "Invalidateline" and change state to "I" for "snoop RWIM" operation.
9. Provide "write" to address "a8" (Different address not present in cache) followed by "snoop RWIM" to same address.
	Should observe a MISS followed by a "BUS read" operation (to get data from DRAM) and L2 to L1 message of "SENDLINE"
	(after getting data from DRAM sends the requested line to L1), internally change MESI state to "M" for "write" operation.
	Should observe L2 to L1 message "Getline & Invalidateline" and change state to "I" for "snoop RWIM" operation.
10. Provide "snoop RWIM" to new address "a9" (Not present in your cache)
	Should do nothing as line is not present in your cache.
// ----------------------------------------------------------------------------------------------------------------------------
// END of Snoopresult test cases
// ----------------------------------------------------------------------------------------------------------------------------
